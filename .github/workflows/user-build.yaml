name: 'Build: User API'

on:
  push:
    branches:
    - main
    paths:
    - 'users/**'
  pull_request:
    branches:
    - main
    paths:
    - 'users/**'

env:
  API_NAME: 'users'

jobs:
  call_dotnet_flow:
    uses: fitability/fitability-api/.github/workflows/dotnet-build-and-deploy.yaml@main
    with:
      job_name: 'User API'
      environment: '${{ secrets.ENVIRONMENT }}'
      api_name: '${{ env.API_NAME }}'
      api_app_name: 'Fitability.Api.Users'
      api_app_path: '${{ github.workspace }}/${{ env.API_NAME }}'
      resource_name: '${{ secrets.RESOURCE_NAME }}'
      location_code: '${{ secrets.LOCATION_CODE }}'
    secrets:
      azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  # build_test_analyse_deploy:
  #   name: 'User API'

  #   runs-on: ubuntu-latest
  #   environment: 'dev'

  #   steps:
  #   - name: Set environment variables
  #     shell: bash
  #     run: |
  #       echo "RESOURCE_GROUP_NAME=rg-${{ secrets.RESOURCE_NAME }}-${{ secrets.ENVIRONMENT }}-${{ secrets.LOCATION_CODE }}" >> $GITHUB_ENV
  #       echo "FUNCTIONAPP_NAME=fncapp-${{ secrets.RESOURCE_NAME }}-$API_NAME-${{ secrets.ENVIRONMENT }}-${{ secrets.LOCATION_CODE }}" >> $GITHUB_ENV
  #       echo "FUNCTIONAPP_PATH=${{ github.workspace }}/$API_NAME/src/Fitability.Api.Users" >> $GITHUB_ENV

  #   # - name: Check environment variables
  #   #   shell: bash
  #   #   run: |
  #   #     echo $RESOURCE_GROUP_NAME
  #   #     echo $FUNCTIONAPP_NAME
  #   #     echo $FUNCTIONAPP_PATH

  #   - name: Checkout the repo
  #     uses: actions/checkout@v2

  #   - name: Login to Azure
  #     uses: Azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}

  #   - name: Setup .NET Core SDK
  #     uses: actions/setup-dotnet@v1
  #     with:
  #       dotnet-version: '6.x'

  #   - name: Initialise CodeQL
  #     uses: github/codeql-action/init@v1
  #     with:
  #       languages: 'csharp'

  #   - name: Restore NuGet packages
  #     shell: bash
  #     run: |
  #       cd "${{ github.workspace }}/${{ env.API_NAME }}"
  #       dotnet restore .

  #   - name: Build solution
  #     shell: bash
  #     run: |
  #       cd "${{ github.workspace }}/${{ env.API_NAME }}"
  #       dotnet build . -c Release

  #   - name: Test solution
  #     shell: bash
  #     run: |
  #       cd "${{ github.workspace }}/${{ env.API_NAME }}"
  #       dotnet test . -c Release

  #   - name: Perform CodeQL analysis
  #     uses: github/codeql-action/analyze@v1

  #   - name: Get CodeQL analysis report
  #     shell: pwsh
  #     run: |
  #       Write-Output "Result: $env:RUNNER_TEMP/codeql_databases/csharp.zip"

  #   - name: Create FunctionApp artifact
  #     shell: bash
  #     run: |
  #       cd "${{ github.workspace }}/${{ env.API_NAME }}"
  #       dotnet publish ${{ env.FUNCTIONAPP_PATH }} -c Release -o published

  #   - name: Get FunctionApp publish profile
  #     id: publishprofile
  #     uses: aliencube/publish-profile-actions@v1
  #     env:
  #       AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  #     with:
  #       resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
  #       appName: ${{ env.FUNCTIONAPP_NAME }}

  #   - name: Deploy FunctionApp
  #     uses: Azure/functions-action@v1
  #     with:
  #       app-name: ${{ env.FUNCTIONAPP_NAME }}
  #       package: ${{ env.API_NAME }}/published
  #       publish-profile: ${{ steps.publishprofile.outputs.profile }}

  #   - name: Reset FunctionApp publish profile
  #     uses: aliencube/publish-profile-actions@v1
  #     env:
  #       AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  #     with:
  #       resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
  #       appName: ${{ env.FUNCTIONAPP_NAME }}
  #       reset: true